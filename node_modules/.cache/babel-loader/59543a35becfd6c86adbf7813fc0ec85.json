{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Desktop/projetos_github/project-frontend-online-store-trybe/src/components/AsideCategories.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCategories } from '../services/api';\nimport Loading from './Loading';\nimport { fetchGetProductsFromCategoryAndQuery, categoryIdValueAction } from '../actions';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\n\nclass AsideCategories extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      categories: []\n    };\n  }\n\n  componentDidMount() {\n    getCategories().then(categories => {\n      this.setState({\n        categories,\n        isLoading: false\n      });\n    });\n  }\n\n  onChangeSearchCategoryId(event) {\n    const {\n      searchInputValueReducer\n    } = this.props;\n    const {\n      fetchGetProductsFromCategoryAndQuery,\n      categoryIdValueAction\n    } = this.props;\n    const categoryId = event.target.value;\n    const query = searchInputValueReducer.replace(/\\s/g, '');\n    categoryIdValueAction(categoryId);\n\n    if (categoryId) {\n      fetchGetProductsFromCategoryAndQuery(categoryId, query);\n      getProductsFromCategoryAndQuery(categoryId, query).then(res => res);\n    }\n  }\n\n  render() {\n    const {\n      isLoading,\n      categories\n    } = this.state;\n    if (isLoading) return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 27\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, categories.map(categorie => /*#__PURE__*/React.createElement(\"div\", {\n      key: categorie.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: categorie.id,\n      name: \"categorieItem\",\n      value: categorie.id,\n      onChange: e => this.onChangeSearchCategoryId(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: categorie.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, categorie.name))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.consoleTeste(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"teste\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  searchInputValueReducer: state.searchInputValueReducer.value\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchGetProductsFromCategoryAndQuery: (categoryId, query) => dispatch(fetchGetProductsFromCategoryAndQuery(categoryId, query)),\n  categoryIdValueAction: value => dispatch(categoryIdValueAction(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AsideCategories);","map":{"version":3,"sources":["/home/fernando/Desktop/projetos_github/project-frontend-online-store-trybe/src/components/AsideCategories.js"],"names":["React","Component","connect","getCategories","Loading","fetchGetProductsFromCategoryAndQuery","categoryIdValueAction","getProductsFromCategoryAndQuery","AsideCategories","constructor","props","state","isLoading","categories","componentDidMount","then","setState","onChangeSearchCategoryId","event","searchInputValueReducer","categoryId","target","value","query","replace","res","render","map","categorie","id","e","name","consoleTeste","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCategories } from '../services/api'\nimport Loading from './Loading';\nimport { fetchGetProductsFromCategoryAndQuery, categoryIdValueAction } from '../actions';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\n\n\nclass AsideCategories extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      categories: [],\n    };\n  }\n\n  componentDidMount() {\n    getCategories()\n      .then((categories) => {\n        this.setState({\n          categories,\n          isLoading: false,\n        })\n      })\n  }\n\n  onChangeSearchCategoryId(event) {\n    const { searchInputValueReducer } = this.props;\n    const { fetchGetProductsFromCategoryAndQuery, categoryIdValueAction } = this.props;\n    const categoryId = event.target.value;\n    const query = searchInputValueReducer.replace(/\\s/g, '');\n    categoryIdValueAction(categoryId);\n    if (categoryId) {\n      fetchGetProductsFromCategoryAndQuery(categoryId, query);\n      getProductsFromCategoryAndQuery(categoryId, query)\n        .then((res) => (res))\n    }\n  }\n\n  render() {\n\n    const { isLoading, categories } = this.state;\n\n    if (isLoading) return <Loading />;\n\n    return (\n      <div>\n        {categories.map((categorie) =>\n          <div key={categorie.id}>\n            <input type=\"radio\" id={categorie.id} name=\"categorieItem\" value={categorie.id} onChange={(e) => this.onChangeSearchCategoryId(e)} />\n            <label htmlFor={categorie.id}>{categorie.name}</label>\n          </div>\n        )}\n        <button onClick={() => this.consoleTeste()}>teste</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  searchInputValueReducer: state.searchInputValueReducer.value,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchGetProductsFromCategoryAndQuery: (categoryId, query) => (dispatch(fetchGetProductsFromCategoryAndQuery(categoryId, query))),\n  categoryIdValueAction: (value) => (dispatch(categoryIdValueAction(value)))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AsideCategories);\n"]},"metadata":{},"sourceType":"module"}