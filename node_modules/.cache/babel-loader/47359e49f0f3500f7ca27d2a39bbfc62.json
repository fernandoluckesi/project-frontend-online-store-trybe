{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { REQUEST_DATA, RECEIVE_DATA, RECEIVE_FAIL, INPUT_QUERY, INPUT_CATEGORYID, CANCEL_REQUEST, ADD_PRODUCT } from '../actions';\nconst stateDefault = {\n  isFetching: false,\n  data: [],\n  resServer: false\n};\n\nconst requestData = (state = stateDefault, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n      return { ...state,\n        isFetching: true\n      };\n\n    case RECEIVE_DATA:\n      return { ...state,\n        isFetching: false,\n        data: action.data,\n        resServer: true\n      };\n\n    case CANCEL_REQUEST:\n      return { ...state,\n        resServer: false\n      };\n\n    case RECEIVE_FAIL:\n      return { ...state,\n        error: action.error,\n        resServer: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst stateInputsValues = {\n  queryValue: '',\n  categoryIdValue: ''\n};\n\nconst inputsValues = (state = stateInputsValues, action) => {\n  switch (action.type) {\n    case INPUT_QUERY:\n      return { ...state,\n        queryValue: action.queryValue\n      };\n\n    case INPUT_CATEGORYID:\n      return { ...state,\n        categoryIdValue: action.categoryIdValue\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst localStorageShoppingCart = JSON.parse(localStorage.getItem('cart'));\nconsole.log(localStorageShoppingCart);\nlet sumtotal = 0;\nlocalStorageShoppingCart.map(item => {\n  sumtotal += item.amount;\n});\nconst sum = localStorageShoppingCart.reduce((ac, cc) => ac.amount + cc.amount);\nconsole.log(sum);\nconst stateShoppingCart = {\n  products: [],\n  totalAmount: 0\n};\n\nconst shoppingCart = (state = stateShoppingCart, action) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return { ...state,\n        products: action.products,\n        totalAmount: state.totalAmount + 1\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  requestData,\n  inputsValues,\n  shoppingCart\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/fernando/Desktop/projetos_github/project-frontend-online-store-trybe/src/reducers/index.js"],"names":["combineReducers","REQUEST_DATA","RECEIVE_DATA","RECEIVE_FAIL","INPUT_QUERY","INPUT_CATEGORYID","CANCEL_REQUEST","ADD_PRODUCT","stateDefault","isFetching","data","resServer","requestData","state","action","type","error","stateInputsValues","queryValue","categoryIdValue","inputsValues","localStorageShoppingCart","JSON","parse","localStorage","getItem","console","log","sumtotal","map","item","amount","sum","reduce","ac","cc","stateShoppingCart","products","totalAmount","shoppingCart","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport {\n  REQUEST_DATA,\n  RECEIVE_DATA,\n  RECEIVE_FAIL,\n  INPUT_QUERY,\n  INPUT_CATEGORYID,\n  CANCEL_REQUEST,\n  ADD_PRODUCT\n} from '../actions';\n\nconst stateDefault = {\n  isFetching: false,\n  data: [],\n  resServer: false,\n};\n\nconst requestData = (state = stateDefault, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA:\n      return {\n        ...state,\n        isFetching: false,\n        data: action.data,\n        resServer: true,\n      };\n    case CANCEL_REQUEST:\n      return {\n        ...state,\n        resServer: false,\n      };\n    case RECEIVE_FAIL:\n      return {\n        ...state,\n        error: action.error,\n        resServer: false,\n      };\n    default:\n      return state;\n  }\n};\n\nconst stateInputsValues = {\n  queryValue: '',\n  categoryIdValue: ''\n};\n\nconst inputsValues = (state = stateInputsValues, action) => {\n  switch (action.type) {\n    case INPUT_QUERY:\n      return {\n        ...state,\n        queryValue: action.queryValue,\n      };\n    case INPUT_CATEGORYID:\n      return {\n        ...state,\n        categoryIdValue: action.categoryIdValue,\n      };\n    default:\n      return state;\n  }\n};\n\nconst localStorageShoppingCart = JSON.parse(localStorage.getItem('cart'));\n\nconsole.log(localStorageShoppingCart)\n\nlet sumtotal = 0;\n\nlocalStorageShoppingCart.map((item ) => {\n  sumtotal += item.amount\n}\n\n)\n\nconst sum = localStorageShoppingCart.reduce((ac, cc) => ac.amount + cc.amount)\n\nconsole.log(sum)\n\n\nconst stateShoppingCart = {\n  products: [],\n  totalAmount: 0,\n};\n\nconst shoppingCart = (state = stateShoppingCart, action) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return {\n        ...state,\n        products: action.products,\n        totalAmount: state.totalAmount + 1,\n      };\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({ requestData, inputsValues, shoppingCart });\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}