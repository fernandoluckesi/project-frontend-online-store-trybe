{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Desktop/projetos_github/project-frontend-online-store-trybe/src/components/AsideCategories.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCategories } from '../services/api';\nimport Loading from './Loading';\nimport { fetchGetProductsFromCategoryAndQuery, inputCategoyId, inputQuery } from '../actions';\n\nclass AsideCategories extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      categories: []\n    };\n  }\n\n  componentDidMount() {\n    getCategories().then(categories => {\n      this.setState({\n        categories,\n        isLoading: false\n      });\n    });\n  }\n\n  onChangeSearchCategoryId(event) {\n    const {\n      fetchGetProductsFromCategoryAndQuery,\n      inputsValues,\n      inputCategoyId,\n      resServer,\n      data,\n      inputQuery\n    } = this.props;\n    const categoryIdValue = event.target.value;\n    const queryValue = inputsValues.queryValue.replace(/\\s/g, '');\n    console.log(queryValue);\n    inputCategoyId(categoryIdValue);\n\n    if (resServer && data.results && data.results.length === 0) {\n      fetchGetProductsFromCategoryAndQuery(categoryIdValue, '').then(() => inputQuery(''));\n    } else {\n      fetchGetProductsFromCategoryAndQuery(categoryIdValue, queryValue);\n    }\n  }\n\n  consoleTest() {\n    const {\n      requestData\n    } = this.props;\n  }\n\n  render() {\n    const {\n      isLoading,\n      categories\n    } = this.state;\n    if (isLoading) return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: \"input-empty\",\n      name: \"categorieItem\",\n      value: \"\",\n      onChange: e => this.onChangeSearchCategoryId(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"input-empty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"Sem categoria\"), categories.map(categorie => /*#__PURE__*/React.createElement(\"div\", {\n      key: categorie.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      id: categorie.id,\n      name: \"categorieItem\",\n      value: categorie.id,\n      onChange: e => this.onChangeSearchCategoryId(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: categorie.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, categorie.name))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.consoleTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Teste\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  inputsValues: state.inputsValues,\n  requestData: state.requestData,\n  isFetching: state.requestData.isFetching,\n  data: state.requestData.data,\n  resServer: state.requestData.resServer\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchGetProductsFromCategoryAndQuery: (categoryId, query) => dispatch(fetchGetProductsFromCategoryAndQuery(categoryId, query)),\n  inputCategoyId: value => dispatch(inputCategoyId(value)),\n  inputQuery: value => dispatch(inputQuery(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AsideCategories);","map":{"version":3,"sources":["/home/fernando/Desktop/projetos_github/project-frontend-online-store-trybe/src/components/AsideCategories.js"],"names":["React","Component","connect","getCategories","Loading","fetchGetProductsFromCategoryAndQuery","inputCategoyId","inputQuery","AsideCategories","constructor","props","state","isLoading","categories","componentDidMount","then","setState","onChangeSearchCategoryId","event","inputsValues","resServer","data","categoryIdValue","target","value","queryValue","replace","console","log","results","length","consoleTest","requestData","render","e","map","categorie","id","name","mapStateToProps","isFetching","mapDispatchToProps","dispatch","categoryId","query"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCategories } from '../services/api'\nimport Loading from './Loading';\nimport {\n  fetchGetProductsFromCategoryAndQuery,\n  inputCategoyId,\n  inputQuery,\n} from '../actions';\n\n\nclass AsideCategories extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      categories: [],\n    };\n  }\n\n  componentDidMount() {\n    getCategories()\n      .then((categories) => {\n        this.setState({\n          categories,\n          isLoading: false,\n        })\n      })\n  }\n\n  onChangeSearchCategoryId(event) {\n    const { fetchGetProductsFromCategoryAndQuery, inputsValues, inputCategoyId, resServer, data, inputQuery } = this.props;\n    const categoryIdValue = event.target.value;\n    const queryValue = inputsValues.queryValue.replace(/\\s/g, '');\n    console.log(queryValue)\n    inputCategoyId(categoryIdValue);\n\n    if (resServer && data.results && data.results.length === 0) {\n      fetchGetProductsFromCategoryAndQuery(categoryIdValue, '')\n        .then(() => inputQuery(''));\n    } else {\n      fetchGetProductsFromCategoryAndQuery(categoryIdValue, queryValue);\n    }\n  }\n\n  consoleTest() {\n    const { requestData } = this.props;\n  }\n\n  render() {\n\n    const { isLoading, categories } = this.state;\n\n    if (isLoading) return <Loading />;\n\n    return (\n      <div>\n        <input\n          type=\"radio\"\n          id=\"input-empty\"\n          name=\"categorieItem\"\n          value=\"\"\n          onChange={(e) =>\n            this.onChangeSearchCategoryId(e)} />\n        <label htmlFor=\"input-empty\">Sem categoria</label>\n        {categories.map((categorie) =>\n          <div key={categorie.id}>\n            <input\n              type=\"radio\"\n              id={categorie.id}\n              name=\"categorieItem\"\n              value={categorie.id}\n              onChange={(e) =>\n                this.onChangeSearchCategoryId(e)} />\n            <label htmlFor={categorie.id}>{categorie.name}</label>\n          </div>\n        )}\n        <button onClick={() => this.consoleTest()}>Teste</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  inputsValues: state.inputsValues,\n  requestData: state.requestData,\n  isFetching: state.requestData.isFetching,\n  data: state.requestData.data,\n  resServer: state.requestData.resServer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchGetProductsFromCategoryAndQuery: (categoryId, query) => (dispatch(fetchGetProductsFromCategoryAndQuery(categoryId, query))),\n  inputCategoyId: (value) => (dispatch(inputCategoyId(value))),\n  inputQuery: (value) => (dispatch(inputQuery(value))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AsideCategories);\n"]},"metadata":{},"sourceType":"module"}