{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { REQUEST_DATA, RECEIVE_DATA, RECEIVE_FAIL, INPUT_QUERY, INPUT_CATEGORYID, CANCEL_REQUEST, ADD_PRODUCT } from '../actions';\nconst stateDefault = {\n  isFetching: false,\n  data: [],\n  resServer: false\n};\n\nconst requestData = (state = stateDefault, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n      return { ...state,\n        isFetching: true\n      };\n\n    case RECEIVE_DATA:\n      return { ...state,\n        isFetching: false,\n        data: action.data,\n        resServer: true\n      };\n\n    case CANCEL_REQUEST:\n      return { ...state,\n        resServer: false\n      };\n\n    case RECEIVE_FAIL:\n      return { ...state,\n        error: action.error,\n        resServer: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst stateInputsValues = {\n  queryValue: '',\n  categoryIdValue: ''\n};\n\nconst inputsValues = (state = stateInputsValues, action) => {\n  switch (action.type) {\n    case INPUT_QUERY:\n      return { ...state,\n        queryValue: action.queryValue\n      };\n\n    case INPUT_CATEGORYID:\n      return { ...state,\n        categoryIdValue: action.categoryIdValue\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst localStorageShoppingCart = JSON.parse(localStorage.getItem('cart'));\nlet totalAmount = 0;\n\nif (localStorageShoppingCart) {\n  totalAmount = localStorageShoppingCart.reduce((acc, cur) => acc.amount + cur.amount);\n  console.log(localStorageShoppingCart);\n}\n\nconsole.log(totalAmount);\nconst stateShoppingCart = {\n  products: [],\n  totalAmount: 0\n};\n\nconst shoppingCart = (state = stateShoppingCart, action) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return { ...state,\n        products: action.products,\n        totalAmount: state.totalAmount + 1\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  requestData,\n  inputsValues,\n  shoppingCart\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/fernando/Desktop/projetos_github/project-frontend-online-store-trybe/src/reducers/index.js"],"names":["combineReducers","REQUEST_DATA","RECEIVE_DATA","RECEIVE_FAIL","INPUT_QUERY","INPUT_CATEGORYID","CANCEL_REQUEST","ADD_PRODUCT","stateDefault","isFetching","data","resServer","requestData","state","action","type","error","stateInputsValues","queryValue","categoryIdValue","inputsValues","localStorageShoppingCart","JSON","parse","localStorage","getItem","totalAmount","reduce","acc","cur","amount","console","log","stateShoppingCart","products","shoppingCart","rootReducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SACEC,YADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,gBALF,EAMEC,cANF,EAOEC,WAPF,QAQO,YARP;AAUA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,SAAS,EAAE;AAHQ,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,YAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELJ,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAKP,YAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,IAAI,EAAEI,MAAM,CAACJ,IAHR;AAILC,QAAAA,SAAS,EAAE;AAJN,OAAP;;AAMF,SAAKL,cAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKR,YAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACE,KAFT;AAGLL,QAAAA,SAAS,EAAE;AAHN,OAAP;;AAKF;AACE,aAAOE,KAAP;AAzBJ;AA2BD,CA5BD;;AA8BA,MAAMI,iBAAiB,GAAG;AACxBC,EAAAA,UAAU,EAAE,EADY;AAExBC,EAAAA,eAAe,EAAE;AAFO,CAA1B;;AAKA,MAAMC,YAAY,GAAG,CAACP,KAAK,GAAGI,iBAAT,EAA4BH,MAA5B,KAAuC;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELK,QAAAA,UAAU,EAAEJ,MAAM,CAACI;AAFd,OAAP;;AAIF,SAAKb,gBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELM,QAAAA,eAAe,EAAEL,MAAM,CAACK;AAFnB,OAAP;;AAIF;AACE,aAAON,KAAP;AAZJ;AAcD,CAfD;;AAiBA,MAAMQ,wBAAwB,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAjC;AAEA,IAAIC,WAAW,GAAG,CAAlB;;AAIA,IAAIL,wBAAJ,EAA8B;AAC5BK,EAAAA,WAAW,GAAGL,wBAAwB,CAACM,MAAzB,CAAgC,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,GAAaD,GAAG,CAACC,MAA/D,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,wBAAZ;AACD;;AAEDU,OAAO,CAACC,GAAR,CAAYN,WAAZ;AAEA,MAAMO,iBAAiB,GAAG;AACxBC,EAAAA,QAAQ,EAAE,EADc;AAExBR,EAAAA,WAAW,EAAE;AAFW,CAA1B;;AAKA,MAAMS,YAAY,GAAG,CAACtB,KAAK,GAAGoB,iBAAT,EAA4BnB,MAA5B,KAAuC;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELqB,QAAAA,QAAQ,EAAEpB,MAAM,CAACoB,QAFZ;AAGLR,QAAAA,WAAW,EAAEb,KAAK,CAACa,WAAN,GAAoB;AAH5B,OAAP;;AAKF;AACE,aAAOb,KAAP;AARJ;AAUD,CAXD;;AAaA,MAAMuB,WAAW,GAAGpC,eAAe,CAAC;AAAEY,EAAAA,WAAF;AAAeQ,EAAAA,YAAf;AAA6Be,EAAAA;AAA7B,CAAD,CAAnC;AAEA,eAAeC,WAAf","sourcesContent":["import { combineReducers } from 'redux';\nimport {\n  REQUEST_DATA,\n  RECEIVE_DATA,\n  RECEIVE_FAIL,\n  INPUT_QUERY,\n  INPUT_CATEGORYID,\n  CANCEL_REQUEST,\n  ADD_PRODUCT\n} from '../actions';\n\nconst stateDefault = {\n  isFetching: false,\n  data: [],\n  resServer: false,\n};\n\nconst requestData = (state = stateDefault, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA:\n      return {\n        ...state,\n        isFetching: false,\n        data: action.data,\n        resServer: true,\n      };\n    case CANCEL_REQUEST:\n      return {\n        ...state,\n        resServer: false,\n      };\n    case RECEIVE_FAIL:\n      return {\n        ...state,\n        error: action.error,\n        resServer: false,\n      };\n    default:\n      return state;\n  }\n};\n\nconst stateInputsValues = {\n  queryValue: '',\n  categoryIdValue: ''\n};\n\nconst inputsValues = (state = stateInputsValues, action) => {\n  switch (action.type) {\n    case INPUT_QUERY:\n      return {\n        ...state,\n        queryValue: action.queryValue,\n      };\n    case INPUT_CATEGORYID:\n      return {\n        ...state,\n        categoryIdValue: action.categoryIdValue,\n      };\n    default:\n      return state;\n  }\n};\n\nconst localStorageShoppingCart = JSON.parse(localStorage.getItem('cart'));\n\nlet totalAmount = 0;\n\n\n\nif (localStorageShoppingCart) {\n  totalAmount = localStorageShoppingCart.reduce((acc, cur) => acc.amount + cur.amount);\n  console.log(localStorageShoppingCart)\n}\n\nconsole.log(totalAmount)\n\nconst stateShoppingCart = {\n  products: [],\n  totalAmount: 0,\n};\n\nconst shoppingCart = (state = stateShoppingCart, action) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return {\n        ...state,\n        products: action.products,\n        totalAmount: state.totalAmount + 1,\n      };\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({ requestData, inputsValues, shoppingCart });\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}